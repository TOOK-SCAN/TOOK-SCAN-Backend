name: Renewal Main Server Develop Server CI/CD

on:
  pull_request:
    branches: [ "dev" ]
    types:
      - opened
      - reopened
      - synchronize
      - closed

jobs:
  CI:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'  # PR이 닫히지 않았을 때 실행
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ### application.yml 설정
      - name: Set YML
        run: |
          echo "${{ secrets.APPLICATION_DEV_YML }}" | base64 --decode > ./src/main/resources/application-dev.yml

      ### gradlew 실행 권한 부여
      - name: Grant execute Permission for gradlew
        run: |
          chmod +x gradlew

      ### project build
      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test

      ### Docker Image Build and Push
      - name: Login to Docker Hub
        if: github.event.pull_request.merged == true
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        if: github.event.pull_request.merged == true
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        if: github.event.pull_request.merged == true
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}-dev

  # closed에 대한 server deploy
  CD:
    if: github.event.pull_request.merged == true
    needs: [CI]
    runs-on: ubuntu-20.04

    steps:
      ### SSH Connect and Docker Image Pull and Container Run
      - name: Docker Image Pull and Container Run
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.DEV_SSH_PORT }}
          script: |
            docker stop api-server
            docker rm api-server
            docker image rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
            docker run -d -p 8080:8080 -v /etc/localtime:/etc/localtime:ro -v /etc/timezone:/etc/timezone:ro --name api-server --network ${{secrets.DOCKER_NETWORKNAME}} ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}-dev
            
            # 사용되지 않는 이미지 정리
            docker image prune -f